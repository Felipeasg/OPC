{"name":"Opc","tagline":"OPC Library for Arduino","body":"ArduinoOPCServer\r\n================\r\n\r\nArduino OPC Server is a library that is used by the OPC Server for Arduino for sharing information but can be used alone.\r\n\r\nIt provide to you with a easy way to interchange information between Arduino and Serial or Ethernet ports in a unified way.\r\n\r\nHow to use it\r\n-------------\r\n\r\nFirst of all you have to have in mind what do you want provide to the external world using Serial, Ethernet or even Wifi.\r\n\r\nAt this moment you can publish your items using serial or http ways. To do this you have some objects that you can use.\r\n\r\nDeclare \r\n```\r\nOPCSerial aOPC; \r\n```\r\nfor serial use or\r\n```\r\nOPCNet aOPC;\r\n```\r\nfor http use\r\n\r\nDeclare your items\r\n------------------\r\n\r\nAn item can be a real or virtual input/output pin of your Arduino. For example, you would want to publish your analog input A0 to the external world or a virtual value based in some operations made with your Arduino using real pins or calculations.\r\n\r\nYou can declare your item this way:\r\n\r\n```\r\naOPC.addItem(\"random\",opc_read, opc_int, callback);\r\n````\r\n\r\nwhere the first param declares your item name\r\nsecond one tell to the library if is read, read/write or write only item (valid values are opc_read, opc_write, opc_readwrite)\r\nthird is the type of the item you are declaring (opc_bool, opc_byte, opc_int, opc_float)\r\nlast is the callback function. The callback will be executed when external client want to read/write a item so you can return or store the desired value.\r\n\r\nHere you can see a complete example\r\n\r\n````\r\n#include <OPC.h>\r\n\r\n/*\r\n * Declaring the OPC object\r\n */\r\nOPCSerial aOPCSerial;\r\n\r\n/*\r\n * We want to publish analogPin 3 to OPC Client\r\n */\r\nint analogPin = 3;\r\n\r\n/*\r\n * create a callback function for the OPCItem\r\n */\r\nint callback(const char *itemID, const opcOperation opcOP, const int value){\r\n  return analogRead(analogPin);\r\n}\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  \r\n  /*\r\n   * OPC Object initialization\r\n   */\r\n  aOPCSerial.setup();\r\n  \r\n  /*\r\n   * A0 OPCItem declaration\r\n   */\r\n  aOPCSerial.addItem(\"A0\",opc_read, opc_int, callback);\r\n}\r\n\r\nvoid loop() {\r\n  /*\r\n   * OPC process commands\r\n   */\r\n  aOPCSerial.processOPCCommands();\r\n}\r\n````\r\n\r\nYou can upload this code and open a terminal. If you send intro to your Arduino it will return all items declared, if you send the name of declared item you will get the value returned by the callback function.\r\n\r\nHere you could find more information and a videotutorial about this topic http://www.st4makers.com/arduino-opc-server/installation-guides/easy-testing-of-your-opc-sketch\r\n\r\n\r\nAt this moment you can visit the project page at http://www.st4makers.com and download it.\r\n\r\nHere you can find the libraries and samples sketchs to start learning and get fun.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}